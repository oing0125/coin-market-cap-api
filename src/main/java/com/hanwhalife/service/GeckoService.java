package com.hanwhalife.service;

import com.hanwhalife.repository.TickerRepository;
import com.hanwhalife.utils.HttpUtil;
import com.hanwhalife.vo.CryptoSearchParamVo;
import com.hanwhalife.vo.GeckoChartParamVo;
import com.hanwhalife.vo.ResponseVo;
import com.hanwhalife.vo.Tickers;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.util.*;

@Service
public class GeckoService {

    @Autowired
    HttpUtil httpUtil;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TickerRepository tickerRepository;

    @Value("${coinGecko.endpoint}")
    private String coinGeckoEndpoint;

    private static final String TICKER_PATH = "/v3/coins/{id}/market_chart";
    private static final String COIN_LIST_PATH = "/v3/coins";
    private static final String COIN_INFO_PATH = "/v3/coins/{id}";
    private static final String TICKER_INFO_PATH = "/v3/exchanges/{exchange}/tickers";


    public JSONObject marketChart(String id, GeckoChartParamVo paramVo){
        Map<String, String> params = new HashMap<String, String>();
        params.put("interval", paramVo.getInterval());
        params.put("vs_currency", paramVo.getVsCurrency());
        params.put("days", paramVo.getDays());
        return httpUtil.doGet(coinGeckoEndpoint, TICKER_PATH.replace("{id}", id), params);
    }

    public JSONObject getCoinInfo(String id){
        return httpUtil.doGet(coinGeckoEndpoint, COIN_INFO_PATH.replace("{id}", id), null);
    }

    public JSONObject getCoinList(){
        return httpUtil.doGet(coinGeckoEndpoint, COIN_LIST_PATH, null);
    }

    public List<Tickers> listTicker(){
        List<Tickers> tickerList = new ArrayList<Tickers>();
        List<String> coinList = new ArrayList<String>();
        coinList.add("btc");
        tickerRepository.findTickersByCoin(coinList).forEach(item -> tickerList.add(item));
        return tickerList;
    }

    public JSONObject syncTicker(){
        String[] exchangeArr = new String[]{"binance", "okex", "gdax", "huobi"};
        Map<String, String> params = new HashMap<String, String>();
        for(String exchage : exchangeArr){
            int pageCnt = 1;
            int previousCount = 1;
            while(previousCount > 0){
                List<Tickers> tickerList = new ArrayList<Tickers>();
                params.put("page", pageCnt+"");
                JSONObject tickerInfo = httpUtil.doGet(coinGeckoEndpoint, TICKER_INFO_PATH.replace("{exchange}", exchage), params);
                JSONArray tickerJsonArr = tickerInfo.getJSONArray("tickers");
                tickerJsonArr.forEach(item -> {
                    JSONObject obj = (JSONObject) item;
                    Tickers tickers = new Tickers(obj.getString("base"), obj.getString("target"), obj.getJSONObject("market").getString("identifier"));
                    tickers.setLast_usd(obj.getJSONObject("converted_last").getFloat("usd"));
                    tickers.setSpread_per(obj.getFloat("bid_ask_spread_percentage"));
                    tickers.setVolume(obj.getBigDecimal("volume").toPlainString());

                    OffsetDateTime lastTradedAt = OffsetDateTime.parse(obj.getString("last_traded_at"));
                    tickers.setLast_traded_at(Timestamp.valueOf(lastTradedAt.toLocalDateTime()));
                    tickers.setOri_text(obj.toString());
                    tickerList.add(tickers);
                });
                previousCount = tickerJsonArr.length();
                pageCnt++;
                tickerRepository.saveAll(tickerList);
            }
        }

        return new JSONObject();
    }
}
